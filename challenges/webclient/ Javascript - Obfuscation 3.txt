

Tout dâ€™abord il faut analyser le code source pour voir les fonctions JS disponible :
On observe un appel Ã  la fonction dechiffre() avec en paramÃ¨tre une chaine en ASCII et le tout est passÃ© en paramÃ¨tre Ã  la fonction fromCharCode() :

    String["fromCharCode"](dechiffre("\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"));

Lorsquâ€™on dÃ©code pas Ã  pas la chaine ASCII cela donne :

\x35 = 5 en decimal
Donc \x35\x35\x2c = "55," et String.fromCharCode(55) ; = 7

En continuant sur cette logique on obtient la chaine suivante :

"55,56,54,79,115,69,114,116,107,49,50"

En calculant :

    String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50);

On obtient "786OsErtk12" qui est le password du challenge.

ou

Hello,
pour rÃ©ussir ce challenge, nous pouvons utiliser seulement deux fonctions de javascript.
Tout dâ€™abord, en cherchant un peu en bas du fichier, on trouve cette longue suit de caractÃ¨re :
\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30

Ouvrez la console et tapez : alert(â€™\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30â€™)
Une pop-up apparait avec en cadeau une suite nombre : 55,56,54,79,115,69,114,116,107,49,50.
Toujours dans la console tapez maintenant : alert(String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50))
Une nouvelle pop-up apparaÃ®t avec cette fois le mot de passe pour valider ce dÃ©fi  ðŸ™‚


ou

Ma solution repose sur les outils disponible en ligne.
Nâ€™ayant pas trop de connaissances en programmation jâ€™ai pu dÃ©duire le mot de passe en analysant le comportement du script

Dâ€™abord jâ€™ai testÃ© le script en tapant nâ€™importe quoi et je tombe sur le message : "FAUX PASSWORD HAHA"

ensuite jâ€™ai dÃ©codÃ© le contenu de la variable pass avec un tool disponible sur internet :
var pass = "70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65";

// pass = F,A,U,X, ,P,A,S,S,W,O,R,D, ,H,A,H,A on https://www.branah.com/ascii-converter

La solution nâ€™est pas lÃ . Jâ€™ai alors cherchÃ© une autre partie du script encodÃ© :

    String["fromCharCode"](dechiffre("\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"));

Je lâ€™ai dÃ©codÃ© deux fois :

// 55,56,54,79,115,69,114,116,107,49,50 on http://ddecode.com/hexdecoder/
// 7,8,6,O,s,E,r,t,k,1,2 on https://www.branah.com/ascii-converter

Je trouve donc 7,8,6,O,s,E,r,t,k,1,2, il ne reste plus quâ€™Ã  retirer les virgules (cf fonction split)


ou

Afin dâ€™obtenir le mot de passe, il suffit de modifier la fonction "dechiffre" afin dâ€™effectuer un console.log de pass_enc (le paramÃ¨tre de la fonction).
Ainsi lors de lâ€™execution de ce bout de code :

    function dechiffre(pass_enc){
        console.log(pass_enc);
        var pass = "70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65";
        var tab  = pass_enc.split(',');
                var tab2 = pass.split(',');var i,j,k,l=0,m,n,o,p = "";i = 0;j = tab.length;
                        k = j + (l) + (n=0);
                        n = tab2.length;
                        for(i = (o=0); i < (k = j = n); i++ ){o = tab[i-l];p += String.fromCharCode((o = tab2[i]));
                                if(i == 5)break;}
                        for(i = (o=0); i < (k = j = n); i++ ){
                        o = tab[i-l]; 
                                if(i > 5 && i < k-1)
                                        p += String.fromCharCode((o = tab2[i]));
                        }
        p += String.fromCharCode(tab2[17]);
        pass = p;return pass;
    }
    String["fromCharCode"](dechiffre("\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"));
    
    h = window.prompt('Entrez le mot de passe / Enter password');
    alert( dechiffre(h) );

On obtient ainsi "55,56,54,79,115,69,114,116,107,49,50" dans la console. Pour obtenir le mot de passe en clair, il suffit dâ€™exÃ©cuter ce bout de code :
console.log(String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50));

Le mot de passe se rÃ©vÃ¨le : 786OsErtk12

ou

Lors de lâ€™analyse du code source de la page, on constate que la mÃ©thode est appelÃ©e avant le prompt :
String["fromCharCode"](dechiffre("\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"));

En mettant un point dâ€™arrÃªt en dÃ©bug via Chrome Developer Tools ou Ã©quivalent, on rÃ©cupÃ¨re la chaÃ®ne dans la variable pass_enc :
pass_enc = "55,56,54,79,115,69,114,116,107,49,50"

Il sâ€™agit dâ€™une chaÃ®ne en unicode. En appelant, via la console, la mÃ©thode String.fromCharCode, on rÃ©cupÃ¨re le mot de passe :
String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50)

"786OsErtk12"

ou

Tout simplement :

String.fromCharCode.apply(String, "\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30".split(","));

Explication :

"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39.....".split(",")

Ici, la chaÃ®ne de caractÃ¨re dÃ©clarÃ©e en hexa sera automatiquement Ã©valuÃ©e en ascii. A cela on applique la mÃ©thode String.split(",") qui retourne un Array[]

String.fromCharCode.apply

est tout simplement lâ€™appel de la mÃ©thode String.fromCharCode avec passage des arguments dans un tableau
(cf : https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function/apply )

