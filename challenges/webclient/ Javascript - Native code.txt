Bonjour,

Pour resoudre ce challenge, j’ai fait d’abord copier/coller tout le script dans la console, ensuite remplacer les deux dernieres parentheses qui sont a la fin du script par : .toString()

Ceci est juste la fin, mais vous devrez copier/coller tout le script :
+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\'')())()

Remplacer les deux dernieres parentheses par .toString() et ca donne :
+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\'')()).toString()

Appuyez la touche "Entree" et voila !
"function anonymous()
a=prompt(’Entrez le mot de passe’) ;if(a==’toto123lol’)alert(’bravo’) ;elsealert(’fail...’) ;
"

ou

En séparant les instructions se terminant par un point-virgule, on a 3 blocs.
Le 1er initialise les valeurs.

É = - ~ - ~[], // [] est équivalent à 0 en nombre, donc ~[] = -1. ~ ( - (-1)) =  ~ (1) = -2, donc le résultat final donne 2.
ó = - ~É, // = - (-3) = 3
Ë = É << É, // 2 << 2 = 8 (déplacement de bits vers la gauche 2 fois)
þ = Ë + ~[]; // 8 - 1 = 7

Le 2e définit simplement
Ì = Function

Comment ? Il faut d’abord remplacer les variables par les valeurs qu’on connaît du 1er bloc. Ensuite ça donne ça :

Ì = (0) [Û = 
    ('' + {}) [5]     // "[object Object]" [5] = "c" -> la chaîne ({}).toString() renvoie [object Object], on convertit en String avec le ""+
    + ('' + {}) [1]   // "[object Object]" [1] = "o"
    + ([].ó + '') [1] // "undefined" [1] = "n" -> [].ó est non défini, conversion en String avec +""
    + (!!'' + '') [3] // "false" [3] = "s" -> !!'' donne false (conversion du string vide en boolean true puis négation en false), et on convertit en String avec +''
    + ({}+ '') [6]    // "[object Object]" [6] = "t"
    + (!'' + '') [1]  // "true" [1] = "r" -> !'' = true, et on convertit en string avec +''
    + (!'' + '') [2]  // "true" [2] = "u"
    + ('' + {}) [5]   // "[object Object]" [5] = "c"
    + ({}+ '') [6]    // "[object Object]" [6] = "t"
    + ('' + {}) [1]   // "[object Object]" [1] = "o"
    + (!'' + '') [1]  // "true" [1] = "r"
 ][Û]; // (0)["constructor"]["constructor"] est équivalent à (0).constructor.constructor, est équivalent à Ì = Function

Pour le 3e bloc, on remplace comme d’habitude les variables par les valeurs qu’on connaît.

Ì(Ì((!'' + '') [1] + (!'' + '') [3] + (!'' + '') [0] + (!'' + '') [2] + ((!'' + '')) [1] + ([].$ + '') [1] + '\'' + '' + '\\' + 1 + 4 + 1 + '\\' + 7 + 5 + '\\' + 1 + 6 + 0 + '\\' + 1 + 6 + 2 + '\\' + 1 + 5 + 7 + '\\' + 1 + 5 + 5 + '\\' + 1 + 6 + 0 + '\\' + 1 + 6 + 4 + '\\' + 5 + 0 + '\\' + 4 + 7 + '\\' + 1 + 0 + 5 + '\\' + 1 + 5 + 6 + '\\' + 1 + 6 + 4 + '\\' + 1 + 6 + 2 + '\\' + 1 + 4 + 5 + '\\' + 1 + 7 + 2 + '\\' + 4 + 0 + '\\' + 1 + 5 + 4 + '\\' + 1 + 4 + 5 + '\\' + 4 + 0 + '\\' + 1 + 5 + 5 + '\\' + 1 + 5 + 7 + '\\' + 1 + 6 + 4 + '\\' + 4 + 0 + '\\' + 1 + 4 + 4 + '\\' + 1 + 4 + 5 + '\\' + 4 + 0 + '\\' + 1 + 6 + 0 + '\\' + 1 + 4 + 1 + '\\' + 1 + 6 + 3 + '\\' + 1 + 6 + 3 + '\\' + 1 + 4 + 5 + '\\' + 4 + 7 + '\\' + 5 + 1 + '\\' + 7 + 3 + '\\' + 1 + 5 + 1 + '\\' + 1 + 4 + 6 + '\\' + 5 + 0 + '\\' + 1 + 4 + 1 + '\\' + 7 + 5 + '\\' + 7 + 5 + '\\' + 4 + 7 + '\\' + 1 + 6 + 4 + '\\' + 1 + 5 + 7 + '\\' + 1 + 6 + 4 + '\\' + 1 + 5 + 7 + '\\' + 6 + 1 + '\\' + 6 + 2 + '\\' + 6 + 3 + '\\' + 1 + 5 + 4 + '\\' + 1 + 5 + 7 + '\\' + 1 + 5 + 4 + '\\' + 4 + 7 + '\\' + 5 + 1 + '\\' + 1 + 7 + 3 + '\\' + 1 + 4 + 1 + '\\' + 1 + 5 + 4 + '\\' + 1 + 4 + 5 + '\\' + 1 + 6 + 2 + '\\' + 1 + 6 + 4 + '\\' + 5 + 0 + '\\' + 4 + 7 + '\\' + 1 + 4 + 2 + '\\' + 1 + 6 + 2 + '\\' + 1 + 4 + 1 + '\\' + 1 + 6 + 6 + '\\' + 1 + 5 + 7 + '\\' + 4 + 7 + '\\' + 5 + 1 + '\\' + 7 + 3 + '\\' + 1 + 7 + 5 + '\\' + 1 + 4 + 5 + '\\' + 1 + 5 + 4 + '\\' + 1 + 6 + 3 + '\\' + 1 + 4 + 5 + '\\' + 1 + 7 + 3 + '\\' + 1 + 4 + 1 + '\\' + 1 + 5 + 4 + '\\' + 1 + 4 + 5 + '\\' + 1 + 6 + 2 + '\\' + 1 + 6 + 4 + '\\' + 5 + 0 + '\\' + 4 + 7 + '\\' + 1 + 4 + 6 + '\\' + 1 + 4 + 1 + '\\' + 1 + 5 + 1 + '\\' + 1 + 5 + 4 + '\\' + 5 + 6 + '\\' + 5 + 6 + '\\' + 5 + 6 + '\\' + 4 + 7 + '\\' + 5 + 1 + '\\' + 7 + 3 + '\\' + 1 + 7 + 5 + '\'') ())

Pour décoder le début de la fonction :

(!'' + '') [1]   // "true"[1] = "r"
+ (!'' + '') [3] // "true"[3] = "e"
+ (!'' + '') [0] // "true"[0] = "t"
+ (!'' + '') [2] // "true"[2] = "u"
+ ((!'' + '')) [1] // "true"[1] = "r"
+ ([].$ + '') [1] // "undefined"[1] = "n"

Ce qui donne au final :
return'\141\75\160\162\157\155\160\164\50\47\105\156\164\162\145\172\40\154\145\40\155\157\164\40\144\145\40\160\141\163\163\145\47\51\73\151\146\50\141\75\75\47\164\157\164\157\61\62\63\154\157\154\47\51\173\141\154\145\162\164\50\47\142\162\141\166\157\47\51\73\175\145\154\163\145\173\141\154\145\162\164\50\47\146\141\151\154\56\56\56\47\51\73\175'

Ce sont les caractères encodés en Latin-1 sous forme octale. Si on fait un alert() de toute la chaîne encodée on a :
a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{alert('fail...');}

Le 3e bloc fait un Function(Function(...)) qui donne la fonction suivante :

function anonymous() {
a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{alert('fail...');}
}

Le mot de passe est évident en lisant la fonction.

ou

Avec le débogueur javascript sur firefox (pas testé avec chrome mais ça revient je pense au même) :

- mettre un point d'arrêt sur la ligne de code javascript (ligne 8)
- utiliser le pas à pas avec F11

Après quelques étapes, le code suivant s’affiche :

    a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{alert('fail...');}

On utilise ce mot de passe pour valider.

ou

Bonjour,

Voici comment j’ai trouvé la solution, en examinant le code source j’ai découvert le script suivant :

(remplacer tilde par le caractère tilde)

É=-tilde -tilde [],ó=-tilde É,Ë=É<<É,þ=Ë+tilde [];Ì=(ó-ó)[Û=(''+{})[É+ó]+(''+{})[ó-É]+([].ó+'')[ó-É]+(!!''+'')[ó]+({}+'')[ó+ó]+(!''+'')[ó-É]+(!''+'')[É]+(''+{})[É+ó]+({}+'')[ó+ó]+(''+{})[ó-É]+(!''+'')[ó-É]][Û];Ì(Ì((!''+'')[ó-É]+(!''+'')[ó]+(!''+'')[ó-ó]+(!''+'')[É]+((!''+''))[ó-É]+([].$+'')[ó-É]+'\''+''+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó-ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(ó+ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+É)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(É+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(þ)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó+ó)+(ó-É)+'\\'+(ó+ó)+(É)+'\\'+(ó+ó)+(ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\'')())()

On remarque un  ; au début de cette chaine qui fait penser à une déclaration de variables :
É=-tilde-tilde[],ó=-tildeÉ,Ë=É<<É,þ=Ë+tilde[];

j’ai éxecuté É=-tilde -tilde[] dans la console de Google Chrome, cela m’a donné le chiffre 2.
après l’avoir fait sur les différentes variables j’ai obtenu ceci :

É=2,
ó=3,
Ë=8,
þ=7 ;

Ensuite on remarque une chaine de caractère dans le reste du code commençant par un échappement d’apostrophe et finissant de même :

'\''+''+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó-ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(ó+ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+É)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(É+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(þ)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó+ó)+(ó-É)+'\\'+(ó+ó)+(É)+'\\'+(ó+ó)+(ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\''

Donc l’idée est de lancer l’initialisation des variables dans la console en exécutant ceci :

É=-tilde-tilde[],
ó=-tildeÉ,
Ë=É<<É,
þ=Ë+\tilde[];

Ensuite on exécute la chaine préalablement trouvée :

'\''+''+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó-ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(ó+ó)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+ó)+(É+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(É+É)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(ó-ó)+'\\'+(ó-É)+(ó+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(É+ó)+(ó-ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(þ)+(É+ó)+'\\'+(þ)+(É+ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó+ó)+(ó-É)+'\\'+(ó+ó)+(É)+'\\'+(ó+ó)+(ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(É)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(ó+ó)+(ó+ó)+'\\'+(ó-É)+(É+ó)+(þ)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(ó+ó)+(ó)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(þ)+(ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(ó-É)+(É+É)+(É+ó)+'\\'+(ó-É)+(ó+ó)+(É)+'\\'+(ó-É)+(ó+ó)+(É+É)+'\\'+(É+ó)+(ó-ó)+'\\'+(É+É)+(þ)+'\\'+(ó-É)+(É+É)+(ó+ó)+'\\'+(ó-É)+(É+É)+(ó-É)+'\\'+(ó-É)+(É+ó)+(ó-É)+'\\'+(ó-É)+(É+ó)+(É+É)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+ó)+(ó+ó)+'\\'+(É+É)+(þ)+'\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\''

Qui nous renvoi comme résultat ceci :

"'\141\75\160\162\157\155\160\164\50\47\105\156\164\162\145\172\40\154\145\40\155\157\164\40\144\145\40\160\141\163\163\145\47\51\73\151\146\50\141\75\75\47\164\157\164\157\61\62\63\154\157\154\47\51\173\141\154\145\162\164\50\47\142\162\141\166\157\47\51\73\175\145\154\163\145\173\141\154\145\162\164\50\47\146\141\151\154\56\56\56\47\51\73\175'"

On affiche la chaine avec un alert :
alert('\141\75\160\162\157\155\160\164\50\47\105\156\164\162\145\172\40\154\145\40\155\157\164\40\144\145\40\160\141\163\163\145\47\51\73\151\146\50\141\75\75\47\164\157\164\157\61\62\63\154\157\154\47\51\173\141\154\145\162\164\50\47\142\162\141\166\157\47\51\73\175\145\154\163\145\173\141\154\145\162\164\50\47\146\141\151\154\56\56\56\47\51\73\175');

et hop le code javascript de vérification du mot de passe nous apparaît :

a=prompt('Entrez le mot de passe');if(a=='toto123lol')
{alert('bravo')else{alert('fail...');}

ou

Voici le code complet. Vous inquiétez pas je vous l’explique.

    s = """É=- - [],ó=- É,Ë=É<<É,þ=Ë+ [] ;Ì=(ó-ó)[Û=(’’+{})[É+ó]+(’’+{})[ó-É]+([].ó+’’)[ó-É]+(!!’’+’’)[ó]+({}+’’)[ó+ó]+(!’’+’’)[ó-É]+(!’’+’’)[É]+(’’+{})[É+ó]+({}+’’)[ó+ó]+(’’+{})[ó-É]+(!’’+’’)[ó-É]][Û] ;Ì(Ì((!’’+’’)[ó-É]+(!’’+’’)[ó]+(!’’+’’)[ó-ó]+(!’’+’’)[É]+((!’’+’’))[ó-É]+([].$+’’)[ó-É]+’\’’+’’+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(þ)+(É+ó)+’\’+(ó-É)+(ó+ó)+(ó-ó)+’\’+(ó-É)+(ó+ó)+(É)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(ó-É)+(É+ó)+(É+ó)+’\’+(ó-É)+(ó+ó)+(ó-ó)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(É+ó)+(ó-ó)+’\’+(É+É)+(þ)+’\’+(ó-É)+(ó-ó)+(É+ó)+’\’+(ó-É)+(É+ó)+(ó+ó)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(ó-É)+(ó+ó)+(É)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(ó-É)+(þ)+(É)+’\’+(É+É)+(ó-ó)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(É+É)+(ó-ó)+’\’+(ó-É)+(É+ó)+(É+ó)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(É+É)+(ó-ó)+’\’+(ó-É)+(É+É)+(É+É)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(É+É)+(ó-ó)+’\’+(ó-É)+(ó+ó)+(ó-ó)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(ó-É)+(ó+ó)+(ó)+’\’+(ó-É)+(ó+ó)+(ó)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(É+É)+(þ)+’\’+(É+ó)+(ó-É)+’\’+(þ)+(ó)+’\’+(ó-É)+(É+ó)+(ó-É)+’\’+(ó-É)+(É+É)+(ó+ó)+’\’+(É+ó)+(ó-ó)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(þ)+(É+ó)+’\’+(þ)+(É+ó)+’\’+(É+É)+(þ)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(ó+ó)+(ó-É)+’\’+(ó+ó)+(É)+’\’+(ó+ó)+(ó)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(É+É)+(þ)+’\’+(É+ó)+(ó-É)+’\’+(ó-É)+(þ)+(ó)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(ó-É)+(ó+ó)+(É)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(É+ó)+(ó-ó)+’\’+(É+É)+(þ)+’\’+(ó-É)+(É+É)+(É)+’\’+(ó-É)+(ó+ó)+(É)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(ó-É)+(ó+ó)+(ó+ó)+’\’+(ó-É)+(É+ó)+(þ)+’\’+(É+É)+(þ)+’\’+(É+ó)+(ó-É)+’\’+(þ)+(ó)+’\’+(ó-É)+(þ)+(É+ó)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(ó-É)+(ó+ó)+(ó)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(ó-É)+(þ)+(ó)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(ó-É)+(É+É)+(É+ó)+’\’+(ó-É)+(ó+ó)+(É)+’\’+(ó-É)+(ó+ó)+(É+É)+’\’+(É+ó)+(ó-ó)+’\’+(É+É)+(þ)+’\’+(ó-É)+(É+É)+(ó+ó)+’\’+(ó-É)+(É+É)+(ó-É)+’\’+(ó-É)+(É+ó)+(ó-É)+’\’+(ó-É)+(É+ó)+(É+É)+’\’+(É+ó)+(ó+ó)+’\’+(É+ó)+(ó+ó)+’\’+(É+ó)+(ó+ó)+’\’+(É+É)+(þ)+’\’+(É+ó)+(ó-É)+’\’+(þ)+(ó)+’\’+(ó-É)+(þ)+(É+ó)+’\’’)())()"""
    blocs = s.split("+’\’+")
    codes = []

    for b in blocs[1 :-1] :
    l = [c.replace(’É’, ’2’).replace(’ó’, ’3’).replace(’Ë’, ’8’).replace(’þ’, ’7’).replace(’(’, ’’).replace(’)’, ’’) for c in b.split(’)+(’)]
    codes.append(’’.join(map(str, map(eval, l))))

    ’’.join(map(chr, map(lambda n : int(n, 8), codes)))

Donc, dans S, on va stocker tout ce code chinois !
On a une première intuition, ’//’ c’est des sauts de ligne en obfusqué !
On a qu’à spliter tout ça dans blocs pour y voir un peu plus clair.

Ensuite, on a cherché à voir ce que signifie tout ces caractères chinois.

    É = - - [] ; ó = - É ; Ë = É<<É ; þ = Ë+ [] ;

On a tapé le début du code dans une console Javascript. Et cela correspondait à des assignations de variables.
Donc É=2, ó=3, Ë=8 et enfin þ=7 ! Bon ben y’a plus qu’à remplacer tout ça.

Pour la suite du for, je vous propose une version décomposée pour que vous comprenniez mieux le bordel !

    for b in blocs[1 :-1] :
    l = [c.replace(’É’, ’2’).replace(’ó’, ’3’).replace(’Ë’, ’8’).replace(’þ’, ’7’).replace(’(’, ’’).replace(’)’, ’’) for c in b.split(’)+(’)]
    n = list(map(str, map(eval, l)))
    c = ’’.join(n)
    print(l, ’->’, n, ’->’, repr(c))
    codes.append(c)

Cela nous affiche :

    [’3-2’, ’2+2’, ’3-2’] -> [’1’, ’4’, ’1’] -> ’141’
    [’7’, ’2+3’] -> [’7’, ’5’] -> ’75’
    [’3-2’, ’3+3’, ’3-3’] -> [’1’, ’6’, ’0’] -> ’160’
    [’3-2’, ’3+3’, ’2’] -> [’1’, ’6’, ’2’] -> ’162’
    [’3-2’, ’2+3’, ’7’] -> [’1’, ’5’, ’7’] -> ’157’
    [’3-2’, ’2+3’, ’2+3’] -> [’1’, ’5’, ’5’] -> ’155’
    [’3-2’, ’3+3’, ’3-3’] -> [’1’, ’6’, ’0’] -> ’160’
    [’3-2’, ’3+3’, ’2+2’] -> [’1’, ’6’, ’4’] -> ’164’
    (...)

Donc, on a trois opérations qui nous donne 2 ou 3 chiffres.
On les regroupe entre eux et on, là, on cherche desesperement les 8 et les 9 !
Ils ne sont pas là :(
Cela signifie qu’on est ni en Decimal ou en Hexa, mais en Octal ! Une base 8 !

On a plus qu’à passer de l’octal en decimal. Transformer la valeur décimal en caractère et les rassembler dans un seul string.

ET LA, PYTHON NOUS APPORTE LA LUMIERE ET NOUS AFFICHE :

a=prompt(’Entrez le mot de passe’) ;if(a==’toto123lol’)alert(’bravo’) ;elsealert(’fail...’) ;

ou

On utilise l’add-on Firefox "Javascript deobfuscator" lors du chargement du script.

Ni une ni deux, le flag apparait :

function anonymous() {
a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{alert('fail...');}

ou

La résolution de l’épreuve peut s’effectuer en utilisant le module Firebug du Navigateur Firefox.

1. Sélectionner l’onglet "Script".
2. Dans la liste des scripts sélectionner : "ch16.html line 8 > Function (1)
3. Le code ci-dessous apparaît avec le mot de passe affiché en clair : toto123lol

a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{alert('fail...');}

ou

Pour résoudre ce challenge il faut décomposer le code grâce aux ’ ;’ puisque les lignes en Javascript se terminent par des ’ ;’.
Sélectionner la dernière partie en retirant les deux parenthèses de fin ’()’ pour éviter d’exécuter la fonction.

\\'+(É+ó)+(ó-É)+'\\'+(þ)+(ó)+'\\'+(ó-É)+(þ)+(É+ó)+'\'')())

Puis exécuter ce bout de code dans la console de chrome, par exemple (ctrl + shift + j).

Le flag est : ’toto123lol’.

ou

Bonjour,

Ouvrir le site "http://codebeautify.org/jsviewer" dans un navigateur.
Coller le code js entre les balises script (sans les balises) dans le champs Input" .
Dans les boutons au centre de la page (entre les deux champs), cliquer sur "Beautify" (nettoyage du code), ensuite il y a le bouton "Download" qui permet de télécharger le code en .js.

Dans un shell je lance la commande :

$ js codebeautify.js

Le résultat :

undefined:2
a=prompt('Entrez le mot de passe');if(a=='toto123lol'){alert('bravo');}else{al
  ^
ReferenceError: prompt is not defined
    at eval (eval at <anonymous> (/home/ariokio/Documents/root-me/web/codebeautify.js:1:340), <anonymous>:2:3)
    at Object.<anonymous> (/home/ariokio/Documents/root-me/web/codebeautify.js:1:3471)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3

Malgré les erreurs, on voit apparaitre le mot de passe, qui est le flag.

