La solution présentée ici est à voir comme un complément à celle de PsychoR ; elle vise principalement à expliquer le principe algorithmique utilisé pour ce chiffrement.

Principe de l’algorithme de chiffrement :

- > Etape 1 : les lettres du message à chiffrer doivent être transcrits numériquement. C’est le même principe que le code ASCII (https://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange), mais comme nous allons disposer d’assez peu de symboles pour coder chaque lettre du message à transmettre, on cherche à pouvoir coder chaque lettre avec le nombre le plus petit possible. Si nous considérons l’écriture binaire du nombre, il s’agit d’utiliser le moins de bits possibles.

Dans le cas du code ASCII historique, chaque caractère est codé sur 7 bits (en fait, on utilise le plus souvent le code ascii sur un octet, le premier bit étant mis à 0). Il y a donc 2^7 = 128 caractères pouvant être codés avec ce code.

Pour un message écrit dans une langue utilisant l’alphabet latin, si on cherche à réduire le nombre de caractères utilisés, on peut tout écrire en lettres minuscules et limiter l’usage de la ponctuation. Si l’on souhaite conserver la possibilité d’une orthographe correcte, il faut au minimum 26 lettres de l’alphabet, l’espace, le point et la virgule. Ce qui fait en tout 29 caractères. Or, 2^5 = 32, donc avec un code à 5 bits, il est possible de coder chaque lettre d’un message écrit en utilisant seulement les 29 caractères auxquels nous nous sommes limités.

Nous pouvons définir ainsi une table de codage (en évitant d’utiliser le codage par 0, nous commençons donc par 1), par exemple :
a = 1 = 00001
b = 2 = 00010
c = 3 = 00011
d = 4 = 00100
...
z = 26 = 11010
. = 27 = 11011
, = 28 = 11100
esp = 29 = 11101

Par exemple, si le message secret à transmettre est "bonjour", la transformation numérique en utilisant cette table devient "2 15 14 10 15 21 18" et en passant en représentation binaire : 00010 01111 01110 01010 01111 10101 10010

- > Le principe général : une méthode historique.

Prenons un texte anodin qui servira de support et comprenant au moins autant de caractères que de bits à transmettre. Nous pouvons prendre la convention que les bits à 0 sont représentés par les caractères en minuscule et les bits à 1 par des majuscules.

La chaîne de l’exemple précédent pourrait par exemple être transmise via le texte suivant :
les GenS QUI nE FOnt RiEn mANQUEnT dE TemPs pour tout.

Pour le décodage, il suffit de remplacer chaque minuscule par "0" chaque majuscule par "1" pour obtenir :
000 1001 111 01 1100 1010 01111101 01 10010 0000 0000.

En remettant une espace tous les cinq bits :
00010 01111 01110 01010 01111 10101 10010 00000000
qui correspond bien à la chaîne binaire du message secret, qu’il suffit de décoder en appliquant à l’envers la méthode décrite à l’étape 1.

Remarquons qu’au décodage, comme le texte anodin qui sert de support est plus long que le message secret, on obtient une série de "0" à la fin, qui n’a pas de sens particulier.

- > Etape 2 : utilisons les homoglyphes du codage UTF-8.

Remarque : un caractère UTF-8 peut se noter (U+xxxx) où xxxx est la valeur du caractère en hexadécimal.

Une homoglyphe est un caractère dont les formes ressemblent beaucoup à celles d’un autre. Par exemple, le "a" latin est très similaire au "a" cyrillique. Le codage UTF-8 est beaucoup plus complet que le code ASCII et permet de coder les caractères de toutes les langues (https://fr.wikipedia.org/wiki/UTF-8). Il est donc possible d’utiliser plusieurs caractères se ressemblants pour coder la même lettre du texte à transmettre. Par exemple, en utilisant le caractère a latin (codé par U+0043 en UTF-8) et le caractère a cyrillique (codé par U+0430) : visuellement, les deux codes donneront une apparence très similaire, mais l’utilisation différenciée de ces deux caractères permet de transmettre une information d’un bit. On peut définir que U+0041 permet de transmettre le bit "1" et que U+0410 permet de transmettre le bit "0".

Ainsi, pour chaque caractère pour lequel nous pouvons trouver deux homoglyphes, il est possible de transmettre un bit en utilisant l’un ou l’autre des homoglyphes.

S’il y a plus de deux homoglyphes, il devient même possible de transmettre plus qu’un bit par caractère. Par exemple, il existe plus de 16 homoglyphes du caractère espace. Comme 16 = 2^4, cela signifie qu’il est possible de transmettre quatre bits dans une espace en utilisant 16 homoglyphes.

On peut donc construire une table de codage utilisant les homoglyphes. Par exemple :
"a" latin (U+0043) = bit 0 / "a" cyrillique (U+0430) = bit 1
"e" latin (U+0047) = bit 0 / "ié" cyrillique (U+0435) = bit 1
"quadratin EN" (U+2000) = bits 00 / "quadratin EM" (U+2001) = bits 01 / "espace EN" (U+2002) = bits 10 / "espace EM" (U+2003) = bits 11

Remarque :
* le "ié" est une lettre qui s’écrit comme le "e"
* un quadratin est un caractère typographique qui correspond à une petite espace

Dans le texte initial, chaque fois qu’on rencontre une lettre "a", "e", ou une espace, il devient possible de faire passer de la donnée en utilisant la table précédente. Par exemple, en prenant le texte support :
"Les gens qui ne font rien"

Le codage (en laissant en lettres classiques les caractères non utilisés pour transporter le message secret et en donnant le codage UTF8 de celles utilisées pour coder le message) :
L(U+OO47)s(U+2000)g(U+0435)ns(U+2000)qui(U+2003)n(U+0047)(U+2002)font(U+2003)ri(U+0435)
permettra d’afficher une phrase ressemblant à s’y méprendre à "Les gens qui ne font rien", mais il est possible de décoder la suite binaire :
0 00 1 00 11 1 10 11 1

L(U+OO47)s(U+2000)g(U+0435)ns(U+2000)qui(U+2003)n(U+0047)(U+2002)font(U+2003)ri(U+0435)
0 00 1 00 11 1 10 11 1

Cet table de codage est construite de façon très simplifiée. En pratique, on se débrouille pour trouver des homoglyphes pour la plupart des caractères, ce qui permet d’augmenter la capacité de transport du texte support.

- > Etape 3 : codage
De façon résumée, l’algorithme de codage est :
- Données de départ : table de codage telle que celle établie à l’étape 2 donnant plusieurs homoglyphes pour écrire un même caractère et permettant ainsi de transmettre des bits.
- Choisir un texte anodin suffisamment long pour servir de support au message secret. Appelons T le texte anodin et T(i) le i-ème caractère du texte anodin.
- Transformer le message secret (écrit uniquement avec les caractères minuscules autorisés dans la table définie à l’étape 1) en binaire. Appelons M la chaine binaire du message secret et M(i) le i-ème bit de la chaîne.
- soit le compteur j initialisé à j=0
- Pour i = 0 à nbre_de_caractères_de_T :
* Si T(i) est dans la table de codage :
alors choisir l’homoglyphe de la table de codage qui permet de transmettre le bit M(j)
* j <- j+1
* si j > nbre_de_bits_de_M
alors sortir de la boucle

- > Etape 4 : décodage /décryptement
Pour le décodage, il suffit de suivre le principe du décodage à l’envers... Sauf que si l’on ne connaît pas la table de codage, ce qui est le cas a priori lorsqu’on mène une activité de décryptement, cela devient plus compliqué ! Dans ce cas, l’idée de base pour mener la cryptanalyse est de disposer de suffisamment de messages pour pouvoir faire une attaque classique fondée sur l’analyse des fréquences. En notant qu’il faudra au préalable faire des hypothèses de construction de la table de codage (association entre les homoglyphes et les bits transmis).

ou

Tout simplement ce message est du Steg Of The Dump sur twitter

Pour résoudre cette énigme, j’ai cherché pendant un petit moment et j’ai trouvé ce site : https://twsteg.devsec.fr/

Vous n’aurez qu’à mettre la phrase voulue et ça vous donnera le mot de passe : " g*****************l "

ou

Steg Of The Dump : Une façon de cacher des messages dans les messages, généralement pour une utilisation sur Twitter.

il suffit de décoder notre tweet à travers ce site : http://holloway.co.nz/steg/

et voilà le message caché : rendezvous at xxx on friday.

ou

Le site proposé dans la solution 1 n’est plus en ligne, mais son code est disponible sur Github et exécutable en local. Voici le lien : https://github.com/holloway/steg-of-the-dump